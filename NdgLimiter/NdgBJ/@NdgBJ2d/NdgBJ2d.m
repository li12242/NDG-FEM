classdef NdgBJ2d < NdgBJAbstract

    methods
        function obj = NdgBJ2d( mesh )
            obj = obj@NdgBJAbstract( mesh );
        end
        
        function fphys = matLimit( obj, fphys, fieldId )
            [ fvmin, fvmax, cvar ] = obj.matEvaluateVertAverage( ...
                fphys, ...
                fieldId ...
                );
            
            for m = obj.Nmesh
                fphys{m}(:,:,fieldId) = mxBJ2d(...
                    fphys{m}(:,:,fieldId), ...
                    obj.meshUnion(m).x, ...
                    obj.meshUnion(m).y, ...
                    cvar{m}, ...
                    obj.meshUnion(m).xc, ...
                    obj.meshUnion(m).yc, ...
                    obj.meshUnion(m).LAV, ...
                    fvmin, ...
                    fvmax, ...
                    obj.meshUnion(m).cell.Fmask, ...
                    obj.meshUnion(m).EToV, ...
                    obj.ws{m} ...
                    );
            end
        end
        
        function ws = assembleEdgeWeiths( obj )
            ws = cell( obj.Nmesh );
            for m = 1:obj.Nmesh
                mesh = obj.meshUnion(m);
                line = StdLine( mesh.cell.N );
                sk = 1;
                Mes = zeros(mesh.cell.Np, mesh.cell.TNfp);
                for f = 1:mesh.cell.Nface
                    row = mesh.cell.Fmask(:, f);
                    row = row(row ~= 0);
                    for n = 1:line.Np
                        Mes(row, sk) = line.M(:, n);
                        sk = sk + 1;
                    end
                end
                ws{m} = sum( Mes );
            end
        end
    end
    
end

